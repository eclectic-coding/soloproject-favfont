{"version":3,"sources":["data/fontData.js","js/app.js"],"names":["fontData","id","name","fallback","designer","originalSampleText","fontSearch","document","getElementById","changeText","fontSize","fontCard","getFont","FONTDATA","map","font","innerHTML","filterItems","arr","query","includes","el","toLowerCase","indexOf","addEventListener","event","textField","Array","prototype","slice","call","querySelectorAll","formValue","target","value","preventDefault","forEach","text","textContent","currentFontSize","style"],"mappings":"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","file":"app.c3f9f951.js","sourceRoot":"../src","sourcesContent":["const fontData = [\n  {\n    id: 1,\n    name: 'Roboto',\n    fallback: 'san-serif',\n    designer: 'Christian Robertson'\n  },\n  {\n    id: 2,\n    name: 'Goldman',\n    fallback: 'cursive',\n    designer: 'Lam Bao, Duy Dao, Yellow Type Foundry'\n  },\n  {\n    id: 3,\n    name: 'Xanh Mono',\n    fallback: 'mono-space',\n    designer: 'Lam Bao, Duy Dao, Yellow Type Foundry'\n  },\n  {\n    id: 4,\n    name: 'Open Sans',\n    fallback: 'san-serif',\n    designer: 'Steve Matteson'\n  },\n  {\n    id: 5,\n    name: 'Big Shoulder Stencil Text',\n    fallback: 'cursive',\n    designer: 'Patric King'\n  },\n  {\n    id: 6,\n    name: 'Noto Sans JP',\n    fallback: 'sans-serif',\n    designer: 'Google'\n  },\n  {\n    id: 7,\n    name: 'Lato',\n    fallback: 'sans-serif',\n    designer: 'Łukasz Dziedzic'\n  },\n  {\n    id: 8,\n    name: 'Source Sans Pro',\n    fallback: 'sans-serif',\n    designer: 'Paul D. Hunt'\n  },\n  {\n    id: 9,\n    name: 'Oswald',\n    fallback: 'sans-serif',\n    designer: 'Vernon Adams, Kalapi Gajjar, Cyreal'\n  },\n  {\n    id: 10,\n    name: 'Poppins',\n    fallback: 'sans-serif',\n    designer: 'Indian Type Foundry, Jonny Pinhorn'\n  },\n  {\n    id: 11,\n    name: 'Raleway',\n    fallback: 'sans-serif',\n    designer: 'Multiple Designers'\n  },\n  {\n    id: 12,\n    name: 'Merriweather',\n    fallback: 'sans-serif',\n    designer: 'Sorkin Type'\n  }\n];\n\nexport default fontData;\n","import FONTDATA from '../data/fontData';\n\nconst originalSampleText = 'Almost before we knew it, we had left the ground.';\nconst fontSearch = document.getElementById('font-search');\nconst changeText = document.getElementById('input-text');\nconst fontSize = document.getElementById('font-size');\n\n// Variables\nlet fontCard = document.getElementById('card-array');\n\n// Load fonts\nconst getFont = () => {\n  FONTDATA.map(font => (\n    fontCard.innerHTML += `\n        <div class=\"card\">\n          <div class=\"card__title\">\n            <h2>${font.name}</h2>\n            <span><i class=\"far fa-plus-square card__icon\"></i></span>\n          </div>\n          <p class=\"card__subtitle\">${font.designer}</p>\n          <p id=\"body-text\"\n            class=\"card__bodytext\" \n            style=\"font-family: '${font.name}', ${font.fallback}\"\n            >\n            ${originalSampleText}\n          </p>\n        </div>\n      `\n  ));\n};\ngetFont();\n\n// Search font array\nconst filterItems = (arr, query) => {\n  return arr.includes(\n    el => el.toLowerCase()\n      .indexOf(query.toLowerCase()) !== -1);\n};\n\n// Event listeners\n\n// Change sample text\nchangeText.addEventListener('input', (event) => {\n  const textField = Array.prototype.slice.call(document.querySelectorAll('#body-text'));\n  let formValue = event.target.value;\n\n  event.preventDefault();\n  textField.forEach((text) => {\n    text.textContent = formValue;\n  });\n});\n\n// Change font size -- defaults to 20px\nfontSize.addEventListener('input', (event) => {\n  const textField = Array.prototype.slice.call(document.querySelectorAll('#body-text'));\n  let currentFontSize = event.target.value;\n\n  textField.forEach(text => {\n    text.style.fontSize =currentFontSize\n  })\n\n});\n"]}