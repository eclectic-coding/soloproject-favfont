{"version":3,"sources":["data/fontData.js","js/reset.js","js/searchBar.js","js/navigation.js","js/app.js"],"names":["fontData","id","name","fallback","designer","resetFontSize","field","forEach","text","style","fontSize","resetCustomText","sample","change","textContent","value","resetCardGrid","document","getElementById","classList","remove","resetColorMode","querySelector","contains","fontCardSearch","fontSearch","fontCards","filter","trim","toLowerCase","textTitle","Array","prototype","slice","call","querySelectorAll","i","length","innerText","indexOf","display","changeSampleText","event","formValue","target","textField","preventDefault","originalSampleText","close","navBox","openNav","console","log","toggle","closeNav","changeText","changeColor","gridList","resetIcon","navButton","closeButton","fontCard","getFont","map","font","innerHTML","addEventListener","currentFontSize"],"mappings":"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","file":"app.16bb9fa6.js","sourceRoot":"../src","sourcesContent":["const fontData = [\n  {\n    id: 1,\n    name: 'Roboto',\n    fallback: 'san-serif',\n    designer: 'Christian Robertson'\n  },\n  {\n    id: 2,\n    name: 'Goldman',\n    fallback: 'cursive',\n    designer: 'Lam Bao, Duy Dao, Yellow Type Foundry'\n  },\n  {\n    id: 3,\n    name: 'Xanh Mono',\n    fallback: 'mono-space',\n    designer: 'Lam Bao, Duy Dao, Yellow Type Foundry'\n  },\n  {\n    id: 4,\n    name: 'Open Sans',\n    fallback: 'san-serif',\n    designer: 'Steve Matteson'\n  },\n  {\n    id: 5,\n    name: 'Big Shoulder Stencil Text',\n    fallback: 'cursive',\n    designer: 'Patric King'\n  },\n  {\n    id: 6,\n    name: 'Noto Sans JP',\n    fallback: 'sans-serif',\n    designer: 'Google'\n  },\n  {\n    id: 7,\n    name: 'Lato',\n    fallback: 'sans-serif',\n    designer: 'Łukasz Dziedzic'\n  },\n  {\n    id: 8,\n    name: 'Source Sans Pro',\n    fallback: 'sans-serif',\n    designer: 'Paul D. Hunt'\n  },\n  {\n    id: 9,\n    name: 'Oswald',\n    fallback: 'sans-serif',\n    designer: 'Vernon Adams, Kalapi Gajjar, Cyreal'\n  },\n  {\n    id: 10,\n    name: 'Poppins',\n    fallback: 'sans-serif',\n    designer: 'Indian Type Foundry, Jonny Pinhorn'\n  },\n  {\n    id: 11,\n    name: 'Raleway',\n    fallback: 'sans-serif',\n    designer: 'Multiple Designers'\n  },\n  {\n    id: 12,\n    name: 'Merriweather',\n    fallback: 'sans-serif',\n    designer: 'Sorkin Type'\n  }\n];\n\nexport default fontData;\n","/*\n * Reset function to reset UI to default state\n *\n * resetFontSize - set font card grid to default 20px font size\n * resetCustomText - reset sample text to default\n * resetCardGrid - reset to font search and card grid to default\n */\nexport const resetFontSize = (field) => {\n  // Reset font size\n  field.forEach(text => {\n    text.style.fontSize = '20px';\n  });\n};\n\nexport const resetCustomText = (field, sample, change) => {\n  // Reset custom text\n  field.forEach(text => {\n    text.textContent = sample;\n  });\n  change.value = '';\n};\n\nexport const resetCardGrid = () => {\n  // Reset card default text\n  document.getElementById('font-search').value = '';\n\n  // Reset cards to from list to grid\n  document.getElementById('card-array').classList.remove('card__list');\n\n};\n\nexport const resetColorMode = () => {\n  const darkClass = document.querySelector('html').classList.contains('dark-mode')\n  if (darkClass) {\n    document.querySelector('html').classList.remove('dark-mode')\n  }\n\n}\n\n","export const fontCardSearch = (fontSearch, fontCards) => {\n\n  let filter = fontSearch.value.trim().toLowerCase();\n  const textTitle = Array.prototype.slice.call(document.querySelectorAll('h2'));\n\n  for (let i = 0; i < fontCards.length; i++) {\n    let txtValue = textTitle[i].textContent || textTitle[i].innerText;\n    if (txtValue.toLowerCase().indexOf(filter) > -1) {\n      fontCards[i].style.display = '';\n    } else {\n      fontCards[i].style.display = 'none';\n    }\n  }\n};\n\nexport const changeSampleText = (event) => {\n\n  let formValue = event.target.value.trim();\n  const textField = Array.prototype.slice.call(document.querySelectorAll('#body-text'));\n\n  event.preventDefault();\n\n  if (formValue !== '') {\n    textField.forEach((text) => {\n      text.textContent = formValue;\n    });\n  } else {\n    textField.forEach((text) => {\n      text.textContent = originalSampleText;\n    });\n  }\n};\n","const close = document.getElementById('close')\nconst navBox = document.querySelector('.navigation__container')\n\nexport const openNav = () => {\n  console.log('Open Nav Bar');\n  navBox.classList.toggle('nav-active')\n  close.style.display = 'block'\n}\n\nexport const closeNav = () => {\n  console.log('Close Nav Bar');\n  navBox.classList.toggle('nav-active')\n  close.style.display = 'none'\n}\n","import FONTDATA from '../data/fontData';\nimport { resetFontSize, resetCustomText, resetCardGrid, resetColorMode } from './reset';\nimport { changeSampleText, fontCardSearch } from './searchBar';\nimport { closeNav, openNav } from './navigation';\n\nconst changeText = document.getElementById('input-text');\nconst changeColor = document.getElementById('dark-mode-toggle');\nconst fontSearch = document.getElementById('font-search');\nconst fontSize = document.getElementById('font-size');\nconst gridList = document.getElementById('grid-list');\nconst originalSampleText = 'Almost before we knew it, we had left the ground.';\nconst resetIcon = document.getElementById('reset-ui');\nconst navButton = document.getElementById('main-menu-toggle')\nconst closeButton = document.getElementById('close')\n\nlet fontCard = document.getElementById('card-array');\n\n// Load font card - UI\nconst getFont = () => {\n  FONTDATA.map(font => (\n    fontCard.innerHTML += `\n        <div class=\"card\">\n          <div class=\"card__title\">\n            <h2>${font.name}</h2>\n            <span><i class=\"far fa-plus-square card__icon\"></i></span>\n          </div>\n          <p class=\"card__subtitle\">${font.designer}</p>\n          <p id=\"body-text\"\n            class=\"card__bodytext\" \n            style=\"font-family: '${font.name}', ${font.fallback}\"\n            >\n            ${originalSampleText}\n          </p>\n        </div>\n      `\n  ));\n};\ngetFont();\n\n/* Event listeners --------------- */\nconst textField = Array.prototype.slice.call(document.querySelectorAll('#body-text'));\nconst fontCards = Array.prototype.slice.call(document.querySelectorAll('.card'));\n\n// Search for and filter font cards\nfontSearch.addEventListener('input', () => fontCardSearch(fontSearch, fontCards))\n\n// Change font card sample text\nchangeText.addEventListener('input', (event) => changeSampleText(event))\n\n// Change font size -- defaults to 20px\nfontSize.addEventListener('input', (event) => {\n  const textField = Array.prototype.slice.call(document.querySelectorAll('#body-text'));\n  let currentFontSize = event.target.value;\n\n  textField.forEach(text => {\n    text.style.fontSize = currentFontSize;\n  });\n});\n\n// Change color\nchangeColor.addEventListener('click', () => {\n  document.querySelector('html').classList.toggle('dark-mode')\n})\n\n// Change grid to list display\ngridList.addEventListener('click', (event) => {\n  fontCard.classList.toggle('card__list')\n})\n\n// Navigation toggle\nnavButton.addEventListener('click', openNav)\n\n// Close side menu\ncloseButton.addEventListener('click', closeNav)\n\n// Reset UI\nresetIcon.addEventListener('click', () => {\n\n  resetFontSize(textField)\n  resetCustomText(textField, originalSampleText, changeText)\n  resetCardGrid()\n  resetColorMode()\n});\n"]}